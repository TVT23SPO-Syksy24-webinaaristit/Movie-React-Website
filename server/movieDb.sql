-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.accounts
(
    idaccount bigserial NOT NULL,
    username character varying(45) NOT NULL,
    email character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    PRIMARY KEY (idaccount)
        INCLUDE(idaccount)
);

CREATE TABLE IF NOT EXISTS public.groups
(
    idgroup bigserial NOT NULL,
    group_name character varying(45) NOT NULL,
    group_description text,
    owner integer NOT NULL,
    member_count integer NOT NULL,
    PRIMARY KEY (idgroup)
        INCLUDE(idgroup)
);

CREATE TABLE IF NOT EXISTS public.group_members
(
    accounts_idaccount integer NOT NULL,
    groups_idgroup integer NOT NULL,
    group_request_timestamp timestamp with time zone,
    is_a_member bit NOT NULL,
    join_date_timestamp timestamp with time zone,
    PRIMARY KEY (accounts_idaccount, groups_idgroup)
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    idreview bigserial NOT NULL,
    idmovie integer NOT NULL,
    review_text text NOT NULL,
    review_points smallint NOT NULL,
    review_creation_timestamp timestamp with time zone NOT NULL,
    accounts_idaccount integer NOT NULL,
    PRIMARY KEY (idreview, accounts_idaccount)
);

CREATE TABLE IF NOT EXISTS public.favorites
(
    idfavorite bigserial NOT NULL,
    idmovie integer NOT NULL,
    poster_url character varying(255) NOT NULL,
    title character varying(255) NOT NULL,
    accounts_idaccount integer NOT NULL,
    PRIMARY KEY (idfavorite, accounts_idaccount)
);

CREATE TABLE IF NOT EXISTS public.group_highlights
(
    idgroup_highlight bigserial NOT NULL,
    poster_url character varying(255) NOT NULL,
    title character varying(255) NOT NULL,
    idmovie_or_event integer NOT NULL,
    description text NOT NULL,
    source_link_url character varying(255) NOT NULL,
    highlight_creation_timestamp timestamp with time zone NOT NULL,
    accounts_idaccount integer NOT NULL,
    groups_idgroup integer NOT NULL,
    PRIMARY KEY (idgroup_highlight, accounts_idaccount, groups_idgroup)
);

ALTER TABLE IF EXISTS public.groups
    ADD FOREIGN KEY (owner)
    REFERENCES public.accounts (idaccount) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.group_members
    ADD FOREIGN KEY (accounts_idaccount)
    REFERENCES public.accounts (idaccount) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.group_members
    ADD FOREIGN KEY (groups_idgroup)
    REFERENCES public.groups (idgroup) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.reviews
    ADD FOREIGN KEY (accounts_idaccount)
    REFERENCES public.accounts (idaccount) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.favorites
    ADD FOREIGN KEY (accounts_idaccount)
    REFERENCES public.accounts (idaccount) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.group_highlights
    ADD FOREIGN KEY (accounts_idaccount)
    REFERENCES public.accounts (idaccount) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.group_highlights
    ADD FOREIGN KEY (groups_idgroup)
    REFERENCES public.groups (idgroup) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


    CREATE PROCEDURE transfer_group_ownership(idusers INT,idgroups INT)
LANGUAGE plpgsql 
AS $$
DECLARE
	chosen_owner INT;
	member_count INT;
BEGIN
IF idusers>0 THEN
	UPDATE groups
	SET owner = idusers
	WHERE idgroup=idgroups;
ELSE	
	SELECT count(*)
	INTO member_count
	FROM group_members
	WHERE groups_idgroup=idgroups;
	IF member_count<1 THEN
		DELETE FROM group_highlights
		WHERE groups_idgroup=idgroups;

		DELETE FROM group_members
		where groups_idgroup=idgroups;
		
		DELETE from groups		/* Group has no members - group will be deleted */
		where idgroup=idgroups;

		
	ELSE
		select accounts_idaccount
		INTO chosen_owner
		FROM group_members
		WHERE groups_idgroup=idgroups
		ORDER BY join_date_timestamp asc
		limit 1;
	
		UPDATE groups
		SET owner = chosen_owner
		WHERE idgroup=idgroups;
	END IF;
END IF;

END;
$$;



CREATE PROCEDURE delete_account(iduser INT)
LANGUAGE plpgsql
AS $$
DECLARE
groups_owned_count INT;
selected_group INT;
BEGIN
delete from favorites f
using accounts
where f.accounts_idaccount = accounts.idaccount
and accounts.idaccount = iduser;

delete from reviews r
using accounts
where r.accounts_idaccount = accounts.idaccount
and accounts.idaccount = iduser;

delete from group_highlights gh
using accounts
where gh.accounts_idaccount = accounts.idaccount
and accounts.idaccount = iduser;

delete from group_members gm
using accounts
where gm.accounts_idaccount = accounts.idaccount
and accounts.idaccount = iduser;

select count(*)
into groups_owned_count
FROM groups
WHERE owner=iduser;

for counter in 1..groups_owned_count loop
	select idgroup
	into selected_group
	from groups
	where owner=iduser
	limit 1;
	CALL transfer_group_ownership(0,selected_group); /* Does an automatic group ownership transfering to every group owned */
END loop;

delete from accounts
where idaccount=iduser;

END;
$$;

END;